{"version":3,"sources":["lib/InfiniteScrollSelect.jsx","generateData.js","App.js","index.js"],"names":["InfiniteScrollSelect","state","loading","data","onScroll","props","loadMore","hasMore","lastElement","document","getElementById","length","containerTop","dropdown","current","getBoundingClientRect","top","height","setState","React","createRef","this","restProps","onPopupScroll","dropdownRender","menu","ref","id","className","indicator","type","style","fontSize","spin","spinning","map","index","label","value","Option","key","nextProps","prevState","Component","getData","pageNumber","Promise","resolve","reject","setTimeout","Error","i","push","getDataSet","App","page","setloading","loadingData","getMoreData","_","a","width","ReactDOM","render"],"mappings":"mWAKqBA,G,mBACpB,aAAe,IAAD,8BACb,+CAUDC,MAAQ,CAAEC,SAAS,EAAOC,KAAM,IAXlB,EAoBdC,SAAW,WAAO,IAAD,EACoB,EAAKC,MAAjCF,EADQ,EACRA,KAAMG,EADE,EACFA,SAAUC,EADR,EACQA,QAClBC,EAAcC,SAASC,gBAAgBP,GAAQ,IAAIQ,OAAS,GAC5DC,EAAe,EAAKC,SAASC,QAAQC,wBAAwBC,IACzCR,EAAYO,wBAAwBC,IAAMJ,EAG5C,GAFA,EAAKC,SAASC,QAAQC,wBAAwBE,SAErB,EAAKhB,MAAMC,SAAWK,IACtE,EAAKW,SAAS,CAAEhB,SAAS,IACzBI,MA3BD,EAAKO,SAAWM,IAAMC,YAFT,E,sEAiCJ,IAAD,SAC2BC,KAAKhB,MAAnBiB,GADb,EACAhB,SADA,+BAEkBe,KAAKpB,MAAvBE,EAFA,EAEAA,KAAMD,EAFN,EAEMA,QACd,OACC,kBAAC,IAAD,iBACKoB,EADL,CAECC,cAAeF,KAAKjB,SACpBoB,eAAgB,SAAAC,GAAI,OACnB,yBAAKC,IAAK,EAAKb,SAAUc,GAAG,YAC1BF,EACD,yBAAKG,UAAU,uBACd,kBAAC,IAAD,CAAMC,UAAW,kBAAC,IAAD,CAAMC,KAAK,UAAUC,MAAO,CAAEC,SAAU,IAAMC,MAAI,IAAKC,SAAUhC,SAKpFC,EAAKgC,KAAI,WAAmBC,GAAnB,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACT,kBAAC,IAAOC,OAAR,CAAeZ,GAAIS,EAAOI,IAAKF,EAAOA,MAAOA,GAC3CD,U,gDAtC0BI,EAAWC,GAC1C,OAAID,EAAUtC,OAASuC,EAAUvC,KACzB,CAAEA,KAAMsC,EAAUtC,KAAMD,SAAS,GAElC,O,GAlByCyC,cCIrCC,EAAU,SAAAC,GACtB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC5BC,YAAW,WACV,IAAM9C,EAZiB,SAAA0C,GACzB,IAAKA,EAAY,MAAM,IAAIK,MAAM,4BAEjC,IADA,IAAI/C,EAAO,GACFgD,EAAI,IAAMN,EAAa,GAAK,EAAGM,EAAI,GAAKN,EAAYM,IAC5DhD,EAAKiD,KAAK,CAAEf,MAAOc,EAAGb,MAAOa,IAE9B,OAAOhD,EAMQkD,CAAWR,GACxBE,EAAQ5C,KACN,SCVgBmD,E,2MACpBrD,MAAQ,CACPE,KAAM,GACNoD,KAAM,G,EAOPC,WAAa,kBAAM,EAAKtC,SAAS,CAAEuC,aAAa,K,EAEhDC,Y,uCAAc,WAAMC,GAAN,eAAAC,EAAA,sEACMhB,EAAQ,EAAK3C,MAAMsD,MADzB,OACPpD,EADO,OAEb,EAAKe,UAAS,SAAAwB,GAAS,MAAK,CAC3BvC,KAAK,GAAD,mBAAMuC,EAAUvC,MAAhB,YAAyBA,IAC7BoD,KAAMb,EAAUa,KAAO,MAJX,2C,yIALblC,KAAKqC,gB,+BAaI,IAAD,EACerC,KAAKpB,MAApBE,EADA,EACAA,KAAMoD,EADN,EACMA,KACd,OAAO,kBAAC,EAAD,CAAsBxB,MAAO,CAAE8B,MAAO,SAAW1D,KAAMA,EAAMI,UAASgD,EAAO,GAAkBjD,SAAUe,KAAKqC,kB,GAtBtFf,a,OCCjCmB,IAASC,OAAO,kBAAC,EAAD,MAAStD,SAASC,eAAe,W","file":"static/js/main.c458eb70.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Select, Spin, Icon } from 'antd'\nimport PropTypes from 'prop-types'\nimport './style.css'\n\nexport default class InfiniteScrollSelect extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.dropdown = React.createRef()\n\t}\n\n\tstatic propTypes = {\n\t\tdata: PropTypes.arrayOf(PropTypes.string).isRequired,\n\t\tloadMore: PropTypes.func.isRequired,\n\t\thasMore: PropTypes.bool,\n\t}\n\n\tstate = { loading: false, data: [] }\n\n\tstatic getDerivedStateFromProps(nextProps, prevState) {\n\t\tif (nextProps.data !== prevState.data) {\n\t\t\treturn { data: nextProps.data, loading: false }\n\t\t}\n\t\treturn {}\n\t}\n\n\tonScroll = () => {\n\t\tconst { data, loadMore, hasMore } = this.props\n\t\tconst lastElement = document.getElementById((data || []).length - 1)\n\t\tconst containerTop = this.dropdown.current.getBoundingClientRect().top\n\t\tconst lastElementTopPos = lastElement.getBoundingClientRect().top - containerTop\n\t\tconst containerHeight = this.dropdown.current.getBoundingClientRect().height\n\n\t\tif (lastElementTopPos - 15 < containerHeight && !this.state.loading && hasMore) {\n\t\t\tthis.setState({ loading: true })\n\t\t\tloadMore()\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { loadMore, ...restProps } = this.props\n\t\tconst { data, loading } = this.state\n\t\treturn (\n\t\t\t<Select\n\t\t\t\t{...restProps}\n\t\t\t\tonPopupScroll={this.onScroll}\n\t\t\t\tdropdownRender={menu => (\n\t\t\t\t\t<div ref={this.dropdown} id='dropdown'>\n\t\t\t\t\t\t{menu}\n\t\t\t\t\t\t<div className='loader-loading-more'>\n\t\t\t\t\t\t\t<Spin indicator={<Icon type='loading' style={{ fontSize: 20 }} spin />} spinning={loading} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{data.map(({ label, value }, index) => (\n\t\t\t\t\t<Select.Option id={index} key={value} value={value}>\n\t\t\t\t\t\t{label}\n\t\t\t\t\t</Select.Option>\n\t\t\t\t))}\n\t\t\t</Select>\n\t\t)\n\t}\n}\n","export const getDataSet = pageNumber => {\n\tif (!pageNumber) throw new Error('page number not provided')\n\tlet data = []\n\tfor (let i = 10 * (pageNumber - 1) + 1; i < 10 * pageNumber; i++) {\n\t\tdata.push({ label: i, value: i })\n\t}\n\treturn data\n}\n\nexport const getData = pageNumber => {\n\treturn new Promise((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tconst data = getDataSet(pageNumber)\n\t\t\tresolve(data)\n\t\t}, 1000)\n\t})\n}\n","import React, { Component } from 'react'\nimport InfiniteScrollSelect from './lib/InfiniteScrollSelect'\nimport { getData } from './generateData'\n\nexport default class App extends Component {\n\tstate = {\n\t\tdata: [],\n\t\tpage: 1,\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getMoreData()\n\t}\n\n\tsetloading = () => this.setState({ loadingData: true })\n\n\tgetMoreData = async _ => {\n\t\tconst data = await getData(this.state.page)\n\t\tthis.setState(prevState => ({\n\t\t\tdata: [...prevState.data, ...data],\n\t\t\tpage: prevState.page + 1,\n\t\t}))\n\t}\n\n\trender() {\n\t\tconst { data, page } = this.state\n\t\treturn <InfiniteScrollSelect style={{ width: '400px' }} data={data} hasMore={page > 5 ? false : true} loadMore={this.getMoreData} />\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}